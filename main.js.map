{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/gameboard.js","webpack://battleship/./src/index.js","webpack://battleship/./src/board-builder.js"],"sourcesContent":["export default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    if (!this.isLegal(ship, row, col)) return;\n    if (ship.orientation === \"horizontal\") {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n        //may or may not need to shift() this.bucket for human players\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n    for (let s = 0; s < this.fleet.length; s++) {\n      if (\n        this.fleet[s].orientation === \"horizontal\" &&\n        !this.isLegal(this.fleet[s], row, col)\n      ) {\n        for (let i = 0; i < this.fleet[s].length; i++) {\n          this.board[row][col + i] = this.fleet[s];\n        }\n      } else {\n        for (\n          let i = 0;\n          i < this.fleet[s].length;\n          i++ && !this.isLegal(this.fleet[s], row, col)\n        ) {\n          this.board[row + i][col] = this.fleet[s];\n        }\n      }\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    this.loser = this.fleet.every((ship) => ship.isSunk());\n  }\n}\n","import BoardBuilder from \"./board-builder\";\nimport renderBoard from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\n\n//all of this is for testing and will be moved to proper locations later\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst userBoard = new GameBoard(\"human\");\nconst computerBoard = new GameBoard(\"computer\");\nconst builder = new BoardBuilder();\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n});\n","export default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        console.log(\"working\");\n        let value = grid.board[i][j]; //might need to change\n        if (value === null) {\n          value = \"\";\n        } else if (value.name) {\n          if (grid.owner === \"human\") {\n            value = value.name;\n          } else {\n            value = \"\";\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  renderFleet(board) {\n    const shipContainer = document.getElementById(\"ships\");\n    for (let i = 0; i < board.fleet.length; i++) {\n      let ship = board.fleet[i];\n      shipContainer.classList.add(`${ship.name}-docked`);\n      shipContainer.setAttribute(\"draggable\", true);\n      shipContainer.dataset.ship = `${ship.name}`;\n      for (let j = 0; j < ship.length; i++) {\n        shipContainer.innerHTML += `<div class=${ship.name} data-index='${i}'></div>`;\n      }\n      elements.fleetDraggable.prepend(shipContainer); //imported from an elements object\n    }\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n}\n"],"names":["GameBoard","constructor","owner","this","board","fleet","bucket","loser","generateBoard","i","Array","fill","assembleFleet","ship","includes","push","placeShip","row","col","isLegal","orientation","length","random","Math","floor","computerPlacement","s","receiveAttack","gameOver","every","isSunk","userBoardDiv","document","getElementById","compBoardDiv","userBoard","computerBoard","builder","appendCells","value","renderBoard","parent","grid","resetBoard","matrix","j","console","log","name","insertAdjacentHTML","renderFleet","shipContainer","classList","add","setAttribute","dataset","innerHTML","elements","fleetDraggable","prepend","textContent","window","addEventListener"],"sourceRoot":""}