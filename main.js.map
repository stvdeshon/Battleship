{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/gameboard.js","webpack://battleship/./src/ships.js","webpack://battleship/./src/index.js","webpack://battleship/./src/board-builder.js"],"sourcesContent":["export default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  fillBucket(ship) {\n    if (this.bucket.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n    }\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    if (!this.isLegal(ship, row, col)) return;\n    if (ship.orientation === \"horizontal\") {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n        //may or may not need to shift() this.bucket for human players\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  randomOrientation(ship) {\n    const newDirection = Math.random() < 0.5;\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      if (newDirection) ship.changeOrientation();\n    }\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n\n    for (let s = 0; s < this.bucket.length; s++) {\n      this.randomOrientation(this.bucket[s]);\n      if (this.bucket.length === 0) return;\n      if (!this.isLegal(this.bucket[s], row, col)) {\n        this.computerPlacement();\n      } else if (\n        this.bucket[s].orientation === \"horizontal\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row][col + i] = this.bucket[s];\n        }\n      } else if (\n        this.bucket[s].orientation === \"vertical\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row + i][col] = this.bucket[s];\n        }\n      }\n      this.bucket.shift();\n      this.computerPlacement();\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    this.loser = this.fleet.every((ship) => ship.isSunk());\n  }\n}\n","export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.orientation = \"horizontal\";\n    this.hits = [];\n  }\n\n  hit(index) {\n    if (this.hits.includes(index) || index < 0 || index >= this.length) {\n      return;\n    } else {\n      this.hits.push(index);\n    }\n  }\n\n  isSunk() {\n    return this.hits.length === this.length;\n  }\n\n  changeOrientation() {\n    return this.orientation === \"horizontal\"\n      ? (this.orientation = \"vertical\")\n      : (this.orientation = \"horizontal\");\n  }\n}\n","import BoardBuilder from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\nimport Ship from \"./ships\";\n// import Player from \"./players\";\n\n//all of this is for testing and will be moved to proper locations later\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst userBoard = new GameBoard(\"human\");\nconst computerBoard = new GameBoard(\"computer\");\nconst builder = new BoardBuilder();\n\n//returns a new fleet so each board gets its own unique array of ships\n\nfunction newFleet() {\n  const carrier = new Ship(\"carrier\", 5);\n  const battleship = new Ship(\"battleship\", 4);\n  const destroyer = new Ship(\"destroyer\", 3);\n  const cruiser = new Ship(\"cruiser\", 3);\n  const submarine = new Ship(\"submarine\", 2);\n  return [carrier, battleship, destroyer, cruiser, submarine];\n}\n\nconst shipSelect = document.getElementById(\"ship-select\");\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"update\");\n  const fleet = newFleet();\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  //what follows is a nascent gameStart function\n  for (let i = 0; i < fleet.length; i++) {\n    userBoard.fillBucket(fleet[i]); //fills user's bucket for display to dom, to be dragged into the fleet and grid next\n    computerBoard.assembleFleet(fleet[i]); //assemble fleet and fill bucket are separated so the logic\n  }\n\n  //the following two loops create a fleet for the user and their bucket and the DOM\n  for (let i = 0; i < fleet.length; i++) {\n    const fleet = newFleet();\n    computerBoard.fillBucket(fleet[i]); //is more flexible for computer and human players\n  }\n  for (let i = 0; i < userBoard.bucket.length; i++) {\n    builder.renderPieces(shipSelect, userBoard.bucket[i].name);\n  }\n\n  computerBoard.computerPlacement();\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n});\n\n//below is the ship flipping and placing logic for human players\n\nconst flipBtn = document.getElementById(\"flip\");\n\nlet angle = 0;\n\nfunction flip() {\n  const bucket = Array.from(shipSelect.children);\n  angle === 0 ? (angle = 90) : (angle = 0);\n\n  bucket.forEach((ship) => (ship.style.transform = `rotate(${angle}deg)`));\n  console.log(userBoard.bucket);\n}\n\nflipBtn.addEventListener(\"click\", flip);\n\n/*\nlet draggedShip;\n\nfunction dragStart(e) {\n  console.log(e.target);\n}\n\nfunction dragOver(e) {\n  e.preventDefault();\n}\n\nfunction dropShip(e) {\n  const startId = e.target.id;\n  // const ship = \n} \n\nbucket.forEach((ship) => ship.addEventListener(\"dragstart\", dragStart));\n*/\n","export default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n\n  appendPieces(shipName) {\n    return `<div class=\"${shipName}-docked ${shipName}\" draggable=\"true\"></div>`;\n  }\n\n  renderPieces(parent, ship) {\n    let pieces = this.appendPieces(ship);\n    parent.innerHTML += pieces;\n  }\n\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        let value = grid.board[i][j]; //might need to change\n        if (value === null) {\n          value = \"\";\n        } else if (value !== null && typeof value === \"object\") {\n          if (grid.owner === \"computer\") {\n            //this condition is temporary and will need to be rethought later\n            value = value.name;\n          } else {\n            value = \"\";\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n}\n"],"names":["GameBoard","constructor","owner","this","board","fleet","bucket","loser","generateBoard","i","Array","fill","fillBucket","ship","includes","push","assembleFleet","placeShip","row","col","isLegal","orientation","length","random","Math","floor","randomOrientation","newDirection","changeOrientation","computerPlacement","s","shift","receiveAttack","gameOver","every","isSunk","Ship","name","hits","hit","index","userBoardDiv","document","getElementById","compBoardDiv","userBoard","computerBoard","builder","appendCells","value","appendPieces","shipName","renderPieces","parent","pieces","innerHTML","renderBoard","grid","resetBoard","matrix","j","insertAdjacentHTML","textContent","newFleet","shipSelect","window","addEventListener","console","log","flipBtn","angle","from","children","forEach","style","transform"],"sourceRoot":""}