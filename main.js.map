{"version":3,"file":"main.js","mappings":"mBAAe,MAAMA,EACnBC,YAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,OAASA,EACdC,KAAKC,YAAc,aACnBD,KAAKE,KAAO,EACd,CAEAC,IAAIC,GACEJ,KAAKE,KAAKG,SAASD,IAAUA,EAAQ,GAAKA,GAASJ,KAAKD,QAG1DC,KAAKE,KAAKI,KAAKF,EAEnB,CAEAG,SACE,OAAOP,KAAKE,KAAKH,SAAWC,KAAKD,MACnC,CAEAS,oBACE,MAA4B,eAArBR,KAAKC,YACPD,KAAKC,YAAc,WACnBD,KAAKC,YAAc,YAC1B,ECxBa,MAAMQ,EACnBZ,YAAYa,GACVV,KAAKU,MAAQA,EACbV,KAAKW,MAAQ,GACbX,KAAKY,MAAQ,GACbZ,KAAKa,OAAS,GACdb,KAAKc,OAAQ,CACf,CAEAC,gBACE,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBhB,KAAKW,MAAMK,GAAK,IAAIC,MAAM,IAAIC,KAAK,MAErC,OAAOlB,KAAKW,KACd,CAEAQ,WAAWC,GACLpB,KAAKa,OAAOR,SAASe,IAGvBpB,KAAKa,OAAOP,KAAKc,EAErB,CAEAC,cAAcD,GACRpB,KAAKY,MAAMP,SAASe,IAGtBpB,KAAKY,MAAMN,KAAKc,EAEpB,CAEAE,UAAUF,EAAMG,EAAKC,GACnB,GAAKxB,KAAKyB,QAAQL,EAAMG,EAAKC,GAC7B,GAAyB,eAArBJ,EAAKnB,YACP,IAAK,IAAIe,EAAI,EAAGA,EAAII,EAAKrB,OAAQiB,IAC/BhB,KAAKW,MAAMY,GAAKC,EAAMR,GAAKI,OAI7B,IAAK,IAAIJ,EAAI,EAAGA,EAAII,EAAKrB,OAAQiB,IAC/BhB,KAAKW,MAAMY,EAAMP,GAAGQ,GAAOJ,CAGjC,CAEAM,SACE,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKD,SACzB,CAEAG,kBAAkBT,GAChB,MAAMU,EAAeH,KAAKD,SAAW,GAErC,IAAK,IAAIV,EAAI,EAAGA,EAAIhB,KAAKY,MAAMb,OAAQiB,IACjCc,GAAcV,EAAKZ,mBAE3B,CAEAuB,oBACE,MAAMR,EAAMvB,KAAK0B,SACfF,EAAMxB,KAAK0B,SAEb,IAAK,IAAIM,EAAI,EAAGA,EAAIhC,KAAKa,OAAOd,OAAQiC,IAAK,CAE3C,GADAhC,KAAK6B,kBAAkB7B,KAAKa,OAAOmB,IACR,IAAvBhC,KAAKa,OAAOd,OAAc,OAC9B,GAAKC,KAAKyB,QAAQzB,KAAKa,OAAOmB,GAAIT,EAAKC,IAEhC,GAC0B,eAA/BxB,KAAKa,OAAOmB,GAAG/B,aACfD,KAAKyB,QAAQzB,KAAKa,OAAOmB,GAAIT,EAAKC,GAElC,IAAK,IAAIR,EAAI,EAAGA,EAAIhB,KAAKa,OAAOmB,GAAGjC,OAAQiB,IACzChB,KAAKW,MAAMY,GAAKC,EAAMR,GAAKhB,KAAKa,OAAOmB,QAEpC,GAC0B,aAA/BhC,KAAKa,OAAOmB,GAAG/B,aACfD,KAAKyB,QAAQzB,KAAKa,OAAOmB,GAAIT,EAAKC,GAElC,IAAK,IAAIR,EAAI,EAAGA,EAAIhB,KAAKa,OAAOmB,GAAGjC,OAAQiB,IACzChB,KAAKW,MAAMY,EAAMP,GAAGQ,GAAOxB,KAAKa,OAAOmB,QAbzChC,KAAK+B,oBAgBP/B,KAAKa,OAAOoB,QACZjC,KAAK+B,mBACP,CACF,CAEAN,QAAQL,EAAMG,EAAKC,GACjB,GAAID,EAAM,GAAKA,EAAM,GAAKC,EAAM,GAAKA,EAAM,EAAG,OAAO,EACrD,GAAyB,eAArBJ,EAAKnB,YAA8B,CACrC,GAAIuB,EAAMJ,EAAKrB,OAAS,EAAG,OAAO,EAClC,IAAK,IAAIiB,EAAI,EAAGA,EAAII,EAAKrB,OAAQiB,IAC/B,GAAIhB,KAAKW,MAAMY,GAAKC,EAAMR,GAAI,OAAO,CAEzC,MAAO,GAAyB,aAArBI,EAAKnB,YAA4B,CAC1C,GAAIsB,EAAMH,EAAKrB,OAAS,EAAG,OAAO,EAClC,IAAK,IAAIiB,EAAI,EAAGA,EAAII,EAAKrB,OAAQiB,IAC/B,GAAIhB,KAAKW,MAAMY,EAAMP,GAAGQ,GAAM,OAAO,CAEzC,CAEA,OAAO,CACT,CAEAU,cAAcX,EAAKC,GACY,QAAzBxB,KAAKW,MAAMY,GAAKC,IAA2C,SAAzBxB,KAAKW,MAAMY,GAAKC,KAElB,OAAzBxB,KAAKW,MAAMY,GAAKC,GACzBxB,KAAKW,MAAMY,GAAKC,GAAO,OAEvBxB,KAAKW,MAAMY,GAAKC,GAAO,MAE3B,CAEAW,WACEnC,KAAKc,MAAQd,KAAKY,MAAMwB,OAAOhB,GAASA,EAAKb,UAC/C,EC7GF,MAAM8B,EAAeC,SAASC,eAAe,oBACvCC,EAAeF,SAASC,eAAe,sBACvCE,EAAY,IAAIhC,EAAU,SAC1BiC,EAAgB,IAAIjC,EAAU,YAC9BkC,EAAU,ICTD,MACbC,YAAYrB,EAAKC,EAAKqB,GAEpB,MAAO,oBAAoBA,gBAAoBtB,gBAAkBC,YACnE,CAEAsB,aAAaC,GACX,MAAO,eAAeA,uBAA8BA,4BACtD,CAEAC,aAAaC,EAAQ7B,GACnB,IAAI8B,EAASlD,KAAK8C,aAAa1B,GAC/B6B,EAAOE,WAAaD,CACtB,CAEAE,YAAYH,EAAQI,GAClBrD,KAAKsD,WAAWL,GAChB,IAAIM,EAAS,GACb,IAAK,IAAIvC,EAAI,EAAGA,EAAIqC,EAAK1C,MAAMZ,OAAQiB,IACrC,IAAK,IAAIwC,EAAI,EAAGA,EAAIH,EAAK1C,MAAMZ,OAAQyD,IAAK,CAC1C,IAAIX,EAAQQ,EAAK1C,MAAMK,GAAGwC,GACZ,OAAVX,EACFA,EAAQ,GACW,OAAVA,GAAmC,iBAAVA,IAGhCA,EAFiB,aAAfQ,EAAK3C,MAECmC,EAAM/C,KAEN,IAGZyD,GAAUvD,KAAK4C,YAAY5B,EAAGwC,EAAGX,EACnC,CAEFI,EAAOQ,mBAAmB,aAAcF,EAC1C,CAEAD,WAAWL,GACTA,EAAOS,YAAc,EACvB,CAEAC,WAME,MAAO,CALS,IAAI/D,EAAK,UAAW,GACjB,IAAIA,EAAK,aAAc,GACxB,IAAIA,EAAK,YAAa,GACxB,IAAIA,EAAK,UAAW,GAClB,IAAIA,EAAK,YAAa,GAE1C,GDnCIgE,EAAatB,SAASC,eAAe,eAE3CsB,OAAOC,iBAAiB,oBAAoB,KAC1CC,QAAQC,IAAI,aACZ,MAAMC,EAAYtB,EAAQgB,WACpBO,EAAYvB,EAAQgB,WAC1BlB,EAAU1B,gBACV2B,EAAc3B,gBAEd,IAAK,IAAIC,EAAI,EAAGA,EAAIiD,EAAUlE,OAAQiB,IACpCyB,EAAUtB,WAAW8C,EAAUjD,IAC/B0B,EAAcrB,cAAc4C,EAAUjD,IAIxC,IAAK,IAAIA,EAAI,EAAGA,EAAIkD,EAAUnE,OAAQiB,IACpC0B,EAAcvB,WAAW+C,EAAUlD,IAErC,IAAK,IAAIA,EAAI,EAAGA,EAAIyB,EAAU5B,OAAOd,OAAQiB,IAC3C2B,EAAQK,aAAaY,EAAYnB,EAAU5B,OAAOG,GAAGlB,MAGvD4C,EAAcX,oBACdY,EAAQS,YAAYf,EAAcI,GAClCE,EAAQS,YAAYZ,EAAcE,EAAc,IAMlCJ,SAASC,eAAe,QAehCuB,iBAAiB,SAbzB,WACE,MAAMjD,EAASI,MAAMkD,KAAKP,EAAWQ,UACrC,IAAK,IAAIpD,EAAI,EAAGA,EAAIH,EAAOd,OAAQiB,IACjC+C,QAAQC,IAAInD,EAAOG,IACfH,EAAOG,GAAGqD,UAAUC,SAAS7B,EAAU5B,OAAOG,GAAGlB,QACnDe,EAAOG,GAAGqD,UAAUE,OAClB,GAAG9B,EAAU5B,OAAOG,GAAGlB,0BAEzBe,EAAOG,GAAGqD,UAAUE,OAAO,GAAG9B,EAAU5B,OAAOG,GAAGlB,wBAGxD,G","sources":["webpack://battleship/./src/ships.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/index.js","webpack://battleship/./src/board-builder.js"],"sourcesContent":["export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.orientation = \"horizontal\";\n    this.hits = [];\n  }\n\n  hit(index) {\n    if (this.hits.includes(index) || index < 0 || index >= this.length) {\n      return;\n    } else {\n      this.hits.push(index);\n    }\n  }\n\n  isSunk() {\n    return this.hits.length === this.length;\n  }\n\n  changeOrientation() {\n    return this.orientation === \"horizontal\"\n      ? (this.orientation = \"vertical\")\n      : (this.orientation = \"horizontal\");\n  }\n}\n","export default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  fillBucket(ship) {\n    if (this.bucket.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n    }\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    if (!this.isLegal(ship, row, col)) return;\n    if (ship.orientation === \"horizontal\") {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n        //may or may not need to shift() this.bucket for human players\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  randomOrientation(ship) {\n    const newDirection = Math.random() < 0.5;\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      if (newDirection) ship.changeOrientation();\n    }\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n\n    for (let s = 0; s < this.bucket.length; s++) {\n      this.randomOrientation(this.bucket[s]);\n      if (this.bucket.length === 0) return;\n      if (!this.isLegal(this.bucket[s], row, col)) {\n        this.computerPlacement();\n      } else if (\n        this.bucket[s].orientation === \"horizontal\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row][col + i] = this.bucket[s];\n        }\n      } else if (\n        this.bucket[s].orientation === \"vertical\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row + i][col] = this.bucket[s];\n        }\n      }\n      this.bucket.shift();\n      this.computerPlacement();\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    this.loser = this.fleet.every((ship) => ship.isSunk());\n  }\n}\n","import BoardBuilder from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\n// import Ship from \"./ships\";\n// import Player from \"./players\";\n\n//all of this is for testing and will be moved to proper locations later\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst userBoard = new GameBoard(\"human\");\nconst computerBoard = new GameBoard(\"computer\");\nconst builder = new BoardBuilder();\n\n//returns a new fleet so each board gets its own unique array of ships\n\nconst shipSelect = document.getElementById(\"ship-select\");\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"they flip\");\n  const compFleet = builder.newFleet();\n  const userFleet = builder.newFleet();\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  //what follows is a nascent gameStart function\n  for (let i = 0; i < compFleet.length; i++) {\n    userBoard.fillBucket(compFleet[i]); //fills user's bucket for display to dom, to be dragged into the fleet and grid next\n    computerBoard.assembleFleet(compFleet[i]); //assemble fleet and fill bucket are separated so the logic\n  }\n\n  //the following two loops create a fleet for the user and their bucket and the DOM\n  for (let i = 0; i < userFleet.length; i++) {\n    computerBoard.fillBucket(userFleet[i]); //is more flexible for computer and human players\n  }\n  for (let i = 0; i < userBoard.bucket.length; i++) {\n    builder.renderPieces(shipSelect, userBoard.bucket[i].name);\n  }\n\n  computerBoard.computerPlacement();\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n});\n\n//below is the ship flipping and placing logic for human players\n//next I must change the individual ship objects orientation attribute\n\nconst flipBtn = document.getElementById(\"flip\");\n\nfunction flip() {\n  const bucket = Array.from(shipSelect.children);\n  for (let i = 0; i < bucket.length; i++) {\n    console.log(bucket[i]);\n    if (bucket[i].classList.contains(userBoard.bucket[i].name)) {\n      bucket[i].classList.toggle(\n        `${userBoard.bucket[i].name}-docked-horizontal`\n      );\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-docked-vertical`);\n    }\n  }\n}\n\nflipBtn.addEventListener(\"click\", flip);\n\n/*\nlet draggedShip;\nfunction dragStart(e) {\n  console.log(e.target);\n}\nfunction dragOver(e) {\n  e.preventDefault();\n}\nfunction dropShip(e) {\n  const startId = e.target.id;\n  // const ship = \n} \nbucket.forEach((ship) => ship.addEventListener(\"dragstart\", dragStart));\n*/\n","import Ship from \"./ships\";\n\nexport default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n\n  appendPieces(shipName) {\n    return `<div class=\"${shipName}-docked-horizontal ${shipName}\" draggable=\"true\"></div>`;\n  }\n\n  renderPieces(parent, ship) {\n    let pieces = this.appendPieces(ship);\n    parent.innerHTML += pieces;\n  }\n\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        let value = grid.board[i][j]; //might need to change\n        if (value === null) {\n          value = \"\";\n        } else if (value !== null && typeof value === \"object\") {\n          if (grid.owner === \"computer\") {\n            //this condition is temporary and will need to be rethought later\n            value = value.name;\n          } else {\n            value = \"\";\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n\n  newFleet() {\n    const carrier = new Ship(\"carrier\", 5);\n    const battleship = new Ship(\"battleship\", 4);\n    const destroyer = new Ship(\"destroyer\", 3);\n    const cruiser = new Ship(\"cruiser\", 3);\n    const submarine = new Ship(\"submarine\", 2);\n    return [carrier, battleship, destroyer, cruiser, submarine];\n  }\n}\n"],"names":["Ship","constructor","name","length","this","orientation","hits","hit","index","includes","push","isSunk","changeOrientation","GameBoard","owner","board","fleet","bucket","loser","generateBoard","i","Array","fill","fillBucket","ship","assembleFleet","placeShip","row","col","isLegal","random","Math","floor","randomOrientation","newDirection","computerPlacement","s","shift","receiveAttack","gameOver","every","userBoardDiv","document","getElementById","compBoardDiv","userBoard","computerBoard","builder","appendCells","value","appendPieces","shipName","renderPieces","parent","pieces","innerHTML","renderBoard","grid","resetBoard","matrix","j","insertAdjacentHTML","textContent","newFleet","shipSelect","window","addEventListener","console","log","compFleet","userFleet","from","children","classList","contains","toggle"],"sourceRoot":""}