{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/ships.js","webpack://battleship/./src/board-builder.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/dragDrop.js","webpack://battleship/./src/index.js"],"sourcesContent":["export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.orientation = \"horizontal\";\n    this.hits = [];\n  }\n\n  hit(index) {\n    if (this.hits.includes(index) || index < 0 || index >= this.length) {\n      return;\n    } else {\n      this.hits.push(index);\n    }\n  }\n\n  isSunk() {\n    return this.hits.length === this.length;\n  }\n\n  changeOrientation() {\n    return this.orientation === \"horizontal\"\n      ? (this.orientation = \"vertical\")\n      : (this.orientation = \"horizontal\");\n  }\n}\n","import Ship from \"./ships\";\n\nexport default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n\n  appendPieces(shipName) {\n    return `<div id=\"${shipName}\" class=\"${shipName}-horizontal docked\" data-type=\"${shipName}\" draggable=\"true\"></div>`;\n  }\n\n  renderPieces(parent, ship) {\n    let pieces = this.appendPieces(ship.name);\n    parent.innerHTML += pieces;\n  }\n\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        let value = grid.board[i][j];\n        if (value === null) {\n          value = \"\";\n        } else if (value !== null && typeof value === \"object\") {\n          if (grid.owner === \"human\") {\n            value = `${value.name} player-${value.name}`;\n          } else {\n            value = `${value.name} computer-${value.name}`;\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n\n  newFleet() {\n    const carrier = new Ship(\"carrier\", 5);\n    const battleship = new Ship(\"battleship\", 4);\n    const destroyer = new Ship(\"destroyer\", 3);\n    const cruiser = new Ship(\"cruiser\", 3);\n    const submarine = new Ship(\"submarine\", 2);\n    return [carrier, battleship, destroyer, cruiser, submarine];\n  }\n}\n","export default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  fillBucket(ship) {\n    if (this.bucket.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n    }\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    let index = this.bucket.indexOf(ship);\n    if (!this.isLegal(ship, row, col)) return false;\n    if (ship.orientation === \"horizontal\") {\n      this.assembleFleet(ship);\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n      }\n    } else {\n      this.assembleFleet(ship);\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n    this.bucket.splice(index, 1);\n    return true;\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  randomOrientation(ship) {\n    const newDirection = Math.random() < 0.5;\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      if (newDirection) ship.changeOrientation();\n    }\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n\n    for (let s = 0; s < this.bucket.length; s++) {\n      this.randomOrientation(this.bucket[s]);\n      if (this.bucket.length === 0) return;\n      if (!this.isLegal(this.bucket[s], row, col)) {\n        this.computerPlacement();\n      } else if (\n        this.bucket[s].orientation === \"horizontal\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row][col + i] = this.bucket[s];\n        }\n      } else if (\n        this.bucket[s].orientation === \"vertical\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row + i][col] = this.bucket[s];\n        }\n      }\n      this.bucket.shift();\n      this.computerPlacement();\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    this.loser = this.fleet.every((ship) => ship.isSunk());\n  }\n}\n","import BoardBuilder from \"./board-builder\";\nconst DragDrop = (userBoardClass, userBoardDiv) => {\n  const builder = new BoardBuilder();\n  let draggedShip;\n\n  function dragStart(e) {\n    draggedShip = e.target;\n    console.log(\"start\");\n  }\n\n  function dragOver(e) {\n    e.preventDefault();\n    console.log(\"over\");\n  }\n\n  function dragEnter(e) {\n    e.preventDefault();\n    console.log(\"enter\");\n  }\n\n  function dragLeave() {\n    console.log(\"leave\");\n  }\n\n  function dragEnd() {\n    console.log(\"end\");\n  }\n\n  function index() {\n    for (let i = 0; i < userBoardClass.bucket.length; i++) {\n      if (userBoardClass.bucket[i].name === draggedShip.dataset.type) {\n        return userBoardClass.bucket[i];\n      }\n    }\n  }\n\n  function dragDrop(e) {\n    const cell = e.target;\n\n    const ship = index();\n\n    const row = Number(cell.dataset.row);\n    const col = Number(cell.dataset.col);\n    const legal = userBoardClass.placeShip(ship, row, col);\n    if (legal) {\n      userBoardClass.placeShip(ship, row, col);\n      builder.renderBoard(userBoardDiv, userBoardClass);\n      combineEvents();\n      draggedShip.parentElement.removeChild(draggedShip);\n    }\n    console.log(userBoardClass.board);\n  }\n\n  function combineEvents() {\n    const docked = document.querySelectorAll(\".docked\");\n    const grid = userBoardDiv.childNodes;\n\n    for (const ship of docked) {\n      ship.addEventListener(\"dragstart\", dragStart);\n      ship.addEventListener(\"dragend\", dragEnd);\n    }\n    for (const cells of grid) {\n      cells.addEventListener(\"dragover\", dragOver);\n      cells.addEventListener(\"dragenter\", dragEnter);\n      cells.addEventListener(\"dragleave\", dragLeave);\n      cells.addEventListener(\"drop\", dragDrop);\n    }\n  }\n\n  return { combineEvents };\n};\n\nexport default DragDrop;\n","import BoardBuilder from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\nimport DragDrop from \"./dragDrop\";\n// import Ship from \"./ships\";\n// import Player from \"./players\";\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst userBoard = new GameBoard(\"human\");\nconst computerBoard = new GameBoard(\"computer\");\nconst builder = new BoardBuilder();\n\n//returns a new fleet so each board gets its own unique array of ships\n\nconst shipSelect = document.getElementById(\"ship-select\");\nconst drag = DragDrop(userBoard, userBoardDiv);\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"buc\");\n  const compFleet = builder.newFleet();\n  const userFleet = builder.newFleet();\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  //what follows is a nascent gameStart function\n  for (let i = 0; i < compFleet.length; i++) {\n    userBoard.fillBucket(compFleet[i]); //fills user's bucket for display to dom, to be dragged into the fleet and grid next\n    computerBoard.assembleFleet(compFleet[i]); //assemble fleet and fill bucket are separated so the logic\n  }\n\n  //the following two loops create a fleet for the user and their bucket and the DOM\n  for (let i = 0; i < userFleet.length; i++) {\n    computerBoard.fillBucket(userFleet[i]); //is more flexible for computer and human players\n  }\n  for (let i = 0; i < userBoard.bucket.length; i++) {\n    builder.renderPieces(shipSelect, userBoard.bucket[i]);\n  }\n  computerBoard.computerPlacement();\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n  drag.combineEvents();\n});\n\n//below is the ship flipping and placing logic for human players\n//next I must change the individual ship objects orientation attribute\n\nconst flipBtn = document.getElementById(\"flip\");\n\nfunction flip() {\n  const bucket = Array.from(shipSelect.children);\n  for (let i = 0; i < bucket.length; i++) {\n    userBoard.bucket[i].changeOrientation(); //will need to empty bucket to prevent this from affecting ships in the gameboard\n    console.log(userBoard.bucket[i].orientation);\n    if (bucket[i].classList.contains(\"docked\")) {\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-horizontal`);\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-vertical`);\n    }\n  }\n}\n\nflipBtn.addEventListener(\"click\", flip);\n"],"names":["Ship","constructor","name","length","this","orientation","hits","hit","index","includes","push","isSunk","changeOrientation","BoardBuilder","appendCells","row","col","value","appendPieces","shipName","renderPieces","parent","ship","pieces","innerHTML","renderBoard","grid","resetBoard","matrix","i","board","j","owner","insertAdjacentHTML","textContent","newFleet","GameBoard","fleet","bucket","loser","generateBoard","Array","fill","fillBucket","assembleFleet","placeShip","indexOf","isLegal","splice","random","Math","floor","randomOrientation","newDirection","computerPlacement","s","shift","receiveAttack","gameOver","every","userBoardDiv","document","getElementById","compBoardDiv","userBoard","computerBoard","builder","shipSelect","drag","userBoardClass","draggedShip","dragStart","e","target","console","log","dragOver","preventDefault","dragEnter","dragLeave","dragEnd","dragDrop","cell","dataset","type","Number","combineEvents","parentElement","removeChild","docked","querySelectorAll","childNodes","addEventListener","cells","window","compFleet","userFleet","from","children","classList","contains","toggle"],"sourceRoot":""}