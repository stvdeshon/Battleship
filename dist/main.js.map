{"version":3,"file":"main.js","mappings":"mBAAe,MAAMA,EACnBC,YAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,OAASA,EACdC,KAAKC,YAAc,aACnBD,KAAKE,KAAO,EACd,CAEAC,IAAIC,GACFJ,KAAKE,KAAKG,KAAKD,EACjB,CAEAE,SACE,GAAIN,KAAKE,KAAKH,SAAWC,KAAKD,OAC5B,OAAO,CAEX,CAEAQ,oBACE,MAA4B,eAArBP,KAAKC,YACPD,KAAKC,YAAc,WACnBD,KAAKC,YAAc,YAC1B,ECpBa,MAAMO,EACnBC,YAAYC,EAAKC,EAAKC,GAEpB,MAAO,oBAAoBA,gBAAoBF,gBAAkBC,YACnE,CAEAE,aAAaC,GACX,MAAO,YAAYA,aAAoBA,mCAA0CA,4BACnF,CAEAC,aAAaC,EAAQC,GACnB,IAAIC,EAASlB,KAAKa,aAAaI,EAAKnB,MACpCkB,EAAOG,WAAaD,CACtB,CAEAE,YAAYJ,EAAQK,GAClBrB,KAAKsB,WAAWN,GAChB,IAAIO,EAAS,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAKI,MAAM1B,OAAQyB,IACrC,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAKI,MAAM1B,OAAQ2B,IAAK,CAC1C,IAAId,EAAQS,EAAKI,MAAMD,GAAGE,GACZ,OAAVd,EACFA,EAAQ,GACW,OAAVA,GAAmC,iBAAVA,IAEhCA,EADiB,UAAfS,EAAKM,MACC,GAAGf,EAAMd,eAAec,EAAMd,OAE9B,GAAGc,EAAMd,iBAAiBc,EAAMd,QAG5CyB,GAAUvB,KAAKS,YAAYe,EAAGE,EAAGd,EACnC,CAEFI,EAAOY,mBAAmB,aAAcL,EAC1C,CAEAD,WAAWN,GACTA,EAAOa,YAAc,EACvB,CAEAC,WAME,MAAO,CALS,IAAIlC,EAAK,UAAW,GACjB,IAAIA,EAAK,aAAc,GACxB,IAAIA,EAAK,YAAa,GACxB,IAAIA,EAAK,UAAW,GAClB,IAAIA,EAAK,YAAa,GAE1C,ECjDa,MAAMmC,EACnBlC,YAAY8B,GACV3B,KAAK2B,MAAQA,EACb3B,KAAKyB,MAAQ,GACbzB,KAAKgC,MAAQ,GACbhC,KAAKiC,OAAS,GACdjC,KAAKkC,OAAQ,CACf,CAEAC,gBACE,IAAK,IAAIX,EAAI,EAAGA,EAAI,GAAIA,IACtBxB,KAAKyB,MAAMD,GAAK,IAAIY,MAAM,IAAIC,KAAK,MAErC,OAAOrC,KAAKyB,KACd,CAEAa,WAAWrB,GACLjB,KAAKiC,OAAOM,SAAStB,IAGvBjB,KAAKiC,OAAO5B,KAAKY,EAErB,CAEAuB,cAAcvB,GACRjB,KAAKgC,MAAMO,SAAStB,IAGtBjB,KAAKgC,MAAM3B,KAAKY,EAEpB,CAEAwB,UAAUxB,EAAMP,EAAKC,GACnB,IAAI+B,EAAQ1C,KAAKiC,OAAOU,QAAQ1B,GAChC,IAAKjB,KAAK4C,QAAQ3B,EAAMP,EAAKC,GAAM,OAAO,EAC1C,GAAyB,eAArBM,EAAKhB,YAA8B,CACrCD,KAAKwC,cAAcvB,GACnB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAKlB,OAAQyB,IAC/BxB,KAAKyB,MAAMf,GAAKC,EAAMa,GAAKP,CAE/B,KAAO,CACLjB,KAAKwC,cAAcvB,GACnB,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAKlB,OAAQyB,IAC/BxB,KAAKyB,MAAMf,EAAMc,GAAGb,GAAOM,CAE/B,CAEA,OADAjB,KAAKiC,OAAOY,OAAOH,EAAO,IACnB,CACT,CAEAI,SACE,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKD,SACzB,CAEAG,kBAAkBhC,GAChB,MAAMiC,EAAeH,KAAKD,SAAW,GAErC,IAAK,IAAItB,EAAI,EAAGA,EAAIxB,KAAKgC,MAAMjC,OAAQyB,IACjC0B,GAAcjC,EAAKV,mBAE3B,CAEA4C,oBACE,MAAMzC,EAAMV,KAAK8C,SACfnC,EAAMX,KAAK8C,SAEb,IAAK,IAAIM,EAAI,EAAGA,EAAIpD,KAAKiC,OAAOlC,OAAQqD,IAAK,CAE3C,GADApD,KAAKiD,kBAAkBjD,KAAKiC,OAAOmB,IACR,IAAvBpD,KAAKiC,OAAOlC,OAAc,OAC9B,GAAKC,KAAK4C,QAAQ5C,KAAKiC,OAAOmB,GAAI1C,EAAKC,IAEhC,GAC0B,eAA/BX,KAAKiC,OAAOmB,GAAGnD,aACfD,KAAK4C,QAAQ5C,KAAKiC,OAAOmB,GAAI1C,EAAKC,GAElC,IAAK,IAAIa,EAAI,EAAGA,EAAIxB,KAAKiC,OAAOmB,GAAGrD,OAAQyB,IACzCxB,KAAKyB,MAAMf,GAAKC,EAAMa,GAAKxB,KAAKiC,OAAOmB,QAEpC,GAC0B,aAA/BpD,KAAKiC,OAAOmB,GAAGnD,aACfD,KAAK4C,QAAQ5C,KAAKiC,OAAOmB,GAAI1C,EAAKC,GAElC,IAAK,IAAIa,EAAI,EAAGA,EAAIxB,KAAKiC,OAAOmB,GAAGrD,OAAQyB,IACzCxB,KAAKyB,MAAMf,EAAMc,GAAGb,GAAOX,KAAKiC,OAAOmB,QAbzCpD,KAAKmD,oBAgBPnD,KAAKiC,OAAOoB,QACZrD,KAAKmD,mBACP,CACF,CAEAP,QAAQ3B,EAAMP,EAAKC,GACjB,GAAID,EAAM,GAAKA,EAAM,GAAKC,EAAM,GAAKA,EAAM,EAAG,OAAO,EACrD,GAAyB,eAArBM,EAAKhB,YAA8B,CACrC,GAAIU,EAAMM,EAAKlB,OAAS,EAAG,OAAO,EAClC,IAAK,IAAIyB,EAAI,EAAGA,EAAIP,EAAKlB,OAAQyB,IAC/B,GAAIxB,KAAKyB,MAAMf,GAAKC,EAAMa,GAAI,OAAO,CAEzC,MAAO,GAAyB,aAArBP,EAAKhB,YAA4B,CAC1C,GAAIS,EAAMO,EAAKlB,OAAS,EAAG,OAAO,EAClC,IAAK,IAAIyB,EAAI,EAAGA,EAAIP,EAAKlB,OAAQyB,IAC/B,GAAIxB,KAAKyB,MAAMf,EAAMc,GAAGb,GAAM,OAAO,CAEzC,CAEA,OAAO,CACT,CAEA2C,cAAc5C,EAAKC,GACjB,GAA6B,QAAzBX,KAAKyB,MAAMf,GAAKC,IAA2C,SAAzBX,KAAKyB,MAAMf,GAAKC,GAE/C,GAA6B,OAAzBX,KAAKyB,MAAMf,GAAKC,GACzBX,KAAKyB,MAAMf,GAAKC,GAAO,WAClB,CACL,IAAK,IAAIa,EAAI,EAAGA,EAAIxB,KAAKgC,MAAMjC,OAAQyB,IACjCxB,KAAKyB,MAAMf,GAAKC,GAAKb,OAASE,KAAKgC,MAAMR,GAAG1B,MAC9CE,KAAKgC,MAAMR,GAAGrB,IAAI,OAGtBH,KAAKyB,MAAMf,GAAKC,GAAO,KACzB,CACF,CAEA4C,WACE,OAAQvD,KAAKkC,MAAQlC,KAAKgC,MAAMwB,OAAOvC,GAASA,EAAKX,UACvD,EC7Ha,MAAMmD,EACnB5D,YAAYC,GACVE,KAAKF,KAAOA,CACd,CAEA4D,OAAOC,EAAoBjD,EAAKC,GAC9BgD,EAAmBL,cAAc5C,EAAKC,EACxC,CAEAmC,SACE,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKD,SACzB,CAEAc,eAAeC,GACb,MAAMnD,EAAMV,KAAK8C,SACfnC,EAAMX,KAAK8C,SACPgB,EAAaD,EAAcpC,MAAMf,GAAKC,GACzB,QAAfmD,GAAuC,SAAfA,EAC1B9D,KAAK4D,eAAeC,GAEpBA,EAAcP,cAAc5C,EAAKC,EAErC,EChBF,MAAMoD,EAAeC,SAASC,eAAe,oBACvCC,EAAeF,SAASC,eAAe,sBACvCE,EAAU,IAAI3D,EACd4D,EAAO,IAAIX,EAAO,SAClBY,EAAY,IAAItC,EAAU,SAE1BuC,GADW,IAAIb,EAAO,YACN,IAAI1B,EAAU,aAI9BwC,EAAaP,SAASC,eAAe,eACrCO,EChBW,EAACC,EAAgBV,KAChC,MAAMI,EAAU,IAAI3D,EACpB,IAAIkE,EAEJ,SAASC,EAAUC,GACjBF,EAAcE,EAAEC,OAChBC,QAAQC,IAAI,QACd,CAEA,SAASC,EAASJ,GAChBA,EAAEK,iBACFH,QAAQC,IAAI,OACd,CAEA,SAASG,EAAUN,GACjBA,EAAEK,iBACFH,QAAQC,IAAI,QACd,CAEA,SAASI,IACPL,QAAQC,IAAI,QACd,CAEA,SAASK,IACPN,QAAQC,IAAI,MACd,CAUA,SAASM,EAAST,GAChB,MAAMU,EAAOV,EAAEC,OAET5D,EAXR,WACE,IAAK,IAAIO,EAAI,EAAGA,EAAIiD,EAAexC,OAAOlC,OAAQyB,IAChD,GAAIiD,EAAexC,OAAOT,GAAG1B,OAAS4E,EAAYa,QAAQC,KACxD,OAAOf,EAAexC,OAAOT,EAGnC,CAKekB,GAEPhC,EAAM+E,OAAOH,EAAKC,QAAQ7E,KAC1BC,EAAM8E,OAAOH,EAAKC,QAAQ5E,KAClB8D,EAAehC,UAAUxB,EAAMP,EAAKC,KAEhD8D,EAAehC,UAAUxB,EAAMP,EAAKC,GACpCwD,EAAQ/C,YAAY2C,EAAcU,GAClCiB,IACAhB,EAAYiB,cAAcC,YAAYlB,GAE1C,CAEA,SAASgB,IACP,MAAMG,EAAS7B,SAAS8B,iBAAiB,WACnCzE,EAAO0C,EAAagC,WAE1B,IAAK,MAAM9E,KAAQ4E,EACjB5E,EAAK+E,iBAAiB,YAAarB,GACnC1D,EAAK+E,iBAAiB,UAAWZ,GAEnC,IAAK,MAAMa,KAAS5E,EAClB4E,EAAMD,iBAAiB,WAAYhB,GACnCiB,EAAMD,iBAAiB,YAAad,GACpCe,EAAMD,iBAAiB,YAAab,GACpCc,EAAMD,iBAAiB,OAAQX,EAEnC,CAEA,MAAO,CAAEK,gBAAe,EDnDb,CAASrB,EAAWN,GAEjCmC,OAAOF,iBAAiB,oBAAoB,KAC1C,MAAMG,EAAYhC,EAAQrC,WACpBsE,EAAYjC,EAAQrC,WAC1BuC,EAAUlC,gBACVmC,EAAcnC,gBAEd,IAAK,IAAIX,EAAI,EAAGA,EAAI2E,EAAUpG,OAAQyB,IACpC6C,EAAU/B,WAAW6D,EAAU3E,IAC/B8C,EAAc9B,cAAc2D,EAAU3E,IAIxC,IAAK,IAAIA,EAAI,EAAGA,EAAI4E,EAAUrG,OAAQyB,IACpC8C,EAAchC,WAAW8D,EAAU5E,IAErC,IAAK,IAAIA,EAAI,EAAGA,EAAI6C,EAAUpC,OAAOlC,OAAQyB,IAC3C2C,EAAQpD,aAAawD,EAAYF,EAAUpC,OAAOT,IAEpD8C,EAAcnB,oBACdgB,EAAQ/C,YAAY2C,EAAcM,GAClCF,EAAQ/C,YAAY8C,EAAcI,GAClCE,EAAKkB,eAAe,IAMtB,MAAMW,EAAWrC,SAASC,eAAe,SACnCqC,EAAUtC,SAASC,eAAe,QAExCoC,EAASL,iBAAiB,SAAS,KAC7B3B,EAAUpC,OAAOlC,QAAU,IAC7BmE,EAAaqC,MAAMC,WAAa,UAChCF,EAAQC,MAAMC,WAAa,SAC3BH,EAASE,MAAMC,WAAa,SAC9B,IAGFF,EAAQN,iBAAiB,SAAS,KAChC,MAAM/D,EAASG,MAAMqE,KAAKlC,EAAWmC,UACrC,IAAK,IAAIlF,EAAI,EAAGA,EAAIS,EAAOlC,OAAQyB,IACjC6C,EAAUpC,OAAOT,GAAGjB,oBAChB0B,EAAOT,GAAGmF,UAAUC,SAAS,YAC/B3E,EAAOT,GAAGmF,UAAUE,OAAO,GAAGxC,EAAUpC,OAAOT,GAAG1B,mBAClDmC,EAAOT,GAAGmF,UAAUE,OAAO,GAAGxC,EAAUpC,OAAOT,GAAG1B,iBAEtD,IAGFoE,EAAa8B,iBAAiB,SAAUpB,IACtC,MAAMC,EAASD,EAAEC,OACXnE,EAAMmE,EAAOU,QAAQ7E,IACrBC,EAAMkE,EAAOU,QAAQ5E,IACvBkE,EAAO8B,UAAUC,SAAS,QAAU/B,EAAO8B,UAAUC,SAAS,UAElExC,EAAKV,OAAOY,EAAe5D,EAAKC,GACM,SAAlC2D,EAAc7C,MAAMf,GAAKC,GAC3BkE,EAAO8B,UAAUG,IAAI,QAErBjC,EAAO8B,UAAUG,IAAI,OAEvBhC,QAAQC,IAAIT,EAActC,OAC1B8C,QAAQC,IAAIT,EAAcf,YAAW,G","sources":["webpack://battleship/./src/ships.js","webpack://battleship/./src/board-builder.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/players.js","webpack://battleship/./src/index.js","webpack://battleship/./src/dragDrop.js"],"sourcesContent":["export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.orientation = \"horizontal\";\n    this.hits = [];\n  }\n\n  hit(counter) {\n    this.hits.push(counter);\n  }\n\n  isSunk() {\n    if (this.hits.length === this.length) {\n      return true;\n    }\n  }\n\n  changeOrientation() {\n    return this.orientation === \"horizontal\"\n      ? (this.orientation = \"vertical\")\n      : (this.orientation = \"horizontal\");\n  }\n}\n","import Ship from \"./ships\";\n\nexport default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n\n  appendPieces(shipName) {\n    return `<div id=\"${shipName}\" class=\"${shipName}-horizontal docked\" data-type=\"${shipName}\" draggable=\"true\"></div>`;\n  }\n\n  renderPieces(parent, ship) {\n    let pieces = this.appendPieces(ship.name);\n    parent.innerHTML += pieces;\n  }\n\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        let value = grid.board[i][j];\n        if (value === null) {\n          value = \"\";\n        } else if (value !== null && typeof value === \"object\") {\n          if (grid.owner === \"human\") {\n            value = `${value.name} player-${value.name}`;\n          } else {\n            value = `${value.name} computer-${value.name}`;\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n\n  newFleet() {\n    const carrier = new Ship(\"carrier\", 5);\n    const battleship = new Ship(\"battleship\", 4);\n    const destroyer = new Ship(\"destroyer\", 3);\n    const cruiser = new Ship(\"cruiser\", 3);\n    const submarine = new Ship(\"submarine\", 2);\n    return [carrier, battleship, destroyer, cruiser, submarine];\n  }\n}\n","export default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  fillBucket(ship) {\n    if (this.bucket.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n    }\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    let index = this.bucket.indexOf(ship);\n    if (!this.isLegal(ship, row, col)) return false;\n    if (ship.orientation === \"horizontal\") {\n      this.assembleFleet(ship);\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n      }\n    } else {\n      this.assembleFleet(ship);\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n    this.bucket.splice(index, 1);\n    return true;\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  randomOrientation(ship) {\n    const newDirection = Math.random() < 0.5;\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      if (newDirection) ship.changeOrientation();\n    }\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n\n    for (let s = 0; s < this.bucket.length; s++) {\n      this.randomOrientation(this.bucket[s]);\n      if (this.bucket.length === 0) return;\n      if (!this.isLegal(this.bucket[s], row, col)) {\n        this.computerPlacement();\n      } else if (\n        this.bucket[s].orientation === \"horizontal\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row][col + i] = this.bucket[s];\n        }\n      } else if (\n        this.bucket[s].orientation === \"vertical\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row + i][col] = this.bucket[s];\n        }\n      }\n      this.bucket.shift();\n      this.computerPlacement();\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      for (let i = 0; i < this.fleet.length; i++) {\n        if (this.board[row][col].name === this.fleet[i].name) {\n          this.fleet[i].hit(\"hit\");\n        }\n      }\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    return (this.loser = this.fleet.every((ship) => ship.isSunk()));\n  }\n}\n","export default class Player {\n  constructor(name) {\n    this.name = name;\n  }\n\n  attack(opponentBoardBoard, row, col) {\n    opponentBoardBoard.receiveAttack(row, col);\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  computerAttack(opponentBoard) {\n    const row = this.random(),\n      col = this.random();\n    const coordinate = opponentBoard.board[row][col];\n    if (coordinate === \"hit\" || coordinate === \"miss\") {\n      this.computerAttack(opponentBoard);\n    } else {\n      opponentBoard.receiveAttack(row, col);\n    }\n  }\n}\n","import BoardBuilder from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\nimport DragDrop from \"./dragDrop\";\n// import Ship from \"./ships\";\nimport Player from \"./players\";\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst builder = new BoardBuilder();\nconst user = new Player(\"human\");\nconst userBoard = new GameBoard(\"human\");\nconst computer = new Player(\"computer\");\nconst computerBoard = new GameBoard(\"computer\");\n\n//returns a new fleet so each board gets its own unique array of ships\n\nconst shipSelect = document.getElementById(\"ship-select\");\nconst drag = DragDrop(userBoard, userBoardDiv);\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  const compFleet = builder.newFleet();\n  const userFleet = builder.newFleet();\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  //what follows is a nascent gameStart function\n  for (let i = 0; i < compFleet.length; i++) {\n    userBoard.fillBucket(compFleet[i]); //fills user's bucket for display to dom, to be dragged into the fleet and grid next\n    computerBoard.assembleFleet(compFleet[i]); //assemble fleet and fill bucket are separated so the logic\n  }\n\n  //the following two loops create a fleet for the user and their bucket and the DOM\n  for (let i = 0; i < userFleet.length; i++) {\n    computerBoard.fillBucket(userFleet[i]); //is more flexible for computer and human players\n  }\n  for (let i = 0; i < userBoard.bucket.length; i++) {\n    builder.renderPieces(shipSelect, userBoard.bucket[i]);\n  }\n  computerBoard.computerPlacement();\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n  drag.combineEvents();\n});\n\n//below is the ship flipping and placing logic for human players\n//next I must change the individual ship objects orientation attribute\n\nconst startBtn = document.getElementById(\"start\");\nconst flipBtn = document.getElementById(\"flip\");\n\nstartBtn.addEventListener(\"click\", () => {\n  if (userBoard.bucket.length <= 0) {\n    compBoardDiv.style.visibility = \"visible\";\n    flipBtn.style.visibility = \"hidden\";\n    startBtn.style.visibility = \"hidden\";\n  }\n});\n\nflipBtn.addEventListener(\"click\", () => {\n  const bucket = Array.from(shipSelect.children);\n  for (let i = 0; i < bucket.length; i++) {\n    userBoard.bucket[i].changeOrientation(); //will need to empty bucket to prevent this from affecting ships in the gameboard\n    if (bucket[i].classList.contains(\"docked\")) {\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-horizontal`);\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-vertical`);\n    }\n  }\n});\n\ncompBoardDiv.addEventListener(\"click\", (e) => {\n  const target = e.target;\n  const row = target.dataset.row;\n  const col = target.dataset.col;\n  if (target.classList.contains(\"hit\") || target.classList.contains(\"miss\"))\n    return;\n  user.attack(computerBoard, row, col);\n  if (computerBoard.board[row][col] === \"miss\") {\n    target.classList.add(\"miss\");\n  } else {\n    target.classList.add(\"hit\");\n  }\n  console.log(computerBoard.fleet);\n  console.log(computerBoard.gameOver());\n});\n","import BoardBuilder from \"./board-builder\";\nconst DragDrop = (userBoardClass, userBoardDiv) => {\n  const builder = new BoardBuilder();\n  let draggedShip;\n\n  function dragStart(e) {\n    draggedShip = e.target;\n    console.log(\"start\");\n  }\n\n  function dragOver(e) {\n    e.preventDefault();\n    console.log(\"over\");\n  }\n\n  function dragEnter(e) {\n    e.preventDefault();\n    console.log(\"enter\");\n  }\n\n  function dragLeave() {\n    console.log(\"leave\");\n  }\n\n  function dragEnd() {\n    console.log(\"end\");\n  }\n\n  function index() {\n    for (let i = 0; i < userBoardClass.bucket.length; i++) {\n      if (userBoardClass.bucket[i].name === draggedShip.dataset.type) {\n        return userBoardClass.bucket[i];\n      }\n    }\n  }\n\n  function dragDrop(e) {\n    const cell = e.target;\n\n    const ship = index();\n\n    const row = Number(cell.dataset.row);\n    const col = Number(cell.dataset.col);\n    const legal = userBoardClass.placeShip(ship, row, col);\n    if (legal) {\n      userBoardClass.placeShip(ship, row, col);\n      builder.renderBoard(userBoardDiv, userBoardClass);\n      combineEvents();\n      draggedShip.parentElement.removeChild(draggedShip);\n    }\n  }\n\n  function combineEvents() {\n    const docked = document.querySelectorAll(\".docked\");\n    const grid = userBoardDiv.childNodes;\n\n    for (const ship of docked) {\n      ship.addEventListener(\"dragstart\", dragStart);\n      ship.addEventListener(\"dragend\", dragEnd);\n    }\n    for (const cells of grid) {\n      cells.addEventListener(\"dragover\", dragOver);\n      cells.addEventListener(\"dragenter\", dragEnter);\n      cells.addEventListener(\"dragleave\", dragLeave);\n      cells.addEventListener(\"drop\", dragDrop);\n    }\n  }\n\n  return { combineEvents };\n};\n\nexport default DragDrop;\n"],"names":["Ship","constructor","name","length","this","orientation","hits","hit","counter","push","isSunk","changeOrientation","BoardBuilder","appendCells","row","col","value","appendPieces","shipName","renderPieces","parent","ship","pieces","innerHTML","renderBoard","grid","resetBoard","matrix","i","board","j","owner","insertAdjacentHTML","textContent","newFleet","GameBoard","fleet","bucket","loser","generateBoard","Array","fill","fillBucket","includes","assembleFleet","placeShip","index","indexOf","isLegal","splice","random","Math","floor","randomOrientation","newDirection","computerPlacement","s","shift","receiveAttack","gameOver","every","Player","attack","opponentBoardBoard","computerAttack","opponentBoard","coordinate","userBoardDiv","document","getElementById","compBoardDiv","builder","user","userBoard","computerBoard","shipSelect","drag","userBoardClass","draggedShip","dragStart","e","target","console","log","dragOver","preventDefault","dragEnter","dragLeave","dragEnd","dragDrop","cell","dataset","type","Number","combineEvents","parentElement","removeChild","docked","querySelectorAll","childNodes","addEventListener","cells","window","compFleet","userFleet","startBtn","flipBtn","style","visibility","from","children","classList","contains","toggle","add"],"sourceRoot":""}