{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/gameboard.js","webpack://battleship/./src/ships.js","webpack://battleship/./src/index.js","webpack://battleship/./src/board-builder.js"],"sourcesContent":["import Ship from \"./ships\";\nexport default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    if (!this.isLegal(ship, row, col)) return;\n    if (ship.orientation === \"horizontal\") {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n        //may or may not need to shift() this.bucket for human players\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  randomOrientation(ship) {\n    const newDirection = Math.random() < 0.5;\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      if (newDirection) ship.changeOrientation();\n    }\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n\n    for (let s = 0; s < this.bucket.length; s++) {\n      this.randomOrientation(this.bucket[s]);\n      if (this.bucket.length === 0) return;\n      if (!this.isLegal(this.bucket[s], row, col)) {\n        this.computerPlacement();\n      } else if (\n        this.bucket[s].orientation === \"horizontal\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        // console.log(this.isLegal(this.bucket[s], row, col));\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row][col + i] = this.bucket[s];\n        }\n      } else if (\n        this.bucket[s].orientation === \"vertical\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        // console.log(this.isLegal(this.bucket[s], row, col));\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row + i][col] = this.bucket[s];\n        }\n      }\n      this.bucket.shift();\n      this.computerPlacement();\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    this.loser = this.fleet.every((ship) => ship.isSunk());\n  }\n}\n","export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.orientation = \"horizontal\";\n    this.hits = [];\n  }\n\n  hit(index) {\n    if (this.hits.includes(index) || index < 0 || index >= this.length) {\n      return;\n    } else {\n      this.hits.push(index);\n    }\n  }\n\n  isSunk() {\n    return this.hits.length === this.length;\n  }\n\n  changeOrientation() {\n    return this.orientation === \"horizontal\"\n      ? (this.orientation = \"vertical\")\n      : (this.orientation = \"horizontal\");\n  }\n}\n","import BoardBuilder from \"./board-builder\";\n// import renderBoard from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\nimport Ship from \"./ships\";\n// import Player from \"./players\";\n\n//all of this is for testing and will be moved to proper locations later\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst userBoard = new GameBoard(\"human\");\nconst computerBoard = new GameBoard(\"computer\");\nconst builder = new BoardBuilder();\n\n//builds fleet, move later\nconst carrier = new Ship(\"Carrier\", 5);\nconst battleship = new Ship(\"Battleship\", 4);\nconst destroyer = new Ship(\"Destroyer\", 3);\nconst cruiser = new Ship(\"Cruiser\", 3);\nconst submarine = new Ship(\"Submarine\", 2);\nconst fleet = [carrier, battleship, destroyer, cruiser, submarine];\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"hi\");\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  for (let i = 0; i < fleet.length; i++) {\n    computerBoard.assembleFleet(fleet[i]);\n  }\n  computerBoard.computerPlacement();\n  console.log(\"working\");\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n});\n\n//instantiate board object, generateboard(), build fleet from array, place ships\n","export default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        let value = grid.board[i][j]; //might need to change\n        if (value === null) {\n          value = \"\";\n        } else if (value !== null && typeof value === \"object\") {\n          if (grid.owner === \"computer\") {\n            console.log(\"comp\");\n            value = value.name;\n          } else {\n            value = \"\";\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  renderFleet(board) {\n    const shipContainer = document.getElementById(\"ships\");\n    for (let i = 0; i < board.fleet.length; i++) {\n      let ship = board.fleet[i];\n      shipContainer.classList.add(`${ship.name}-docked`);\n      shipContainer.setAttribute(\"draggable\", true);\n      shipContainer.dataset.ship = `${ship.name}`;\n      for (let j = 0; j < ship.length; i++) {\n        shipContainer.innerHTML += `<div class=${ship.name} data-index='${i}'></div>`;\n      }\n      // elements.fleetDraggable.prepend(shipContainer); //imported from an elements object\n    }\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n}\n"],"names":["GameBoard","constructor","owner","this","board","fleet","bucket","loser","generateBoard","i","Array","fill","assembleFleet","ship","includes","push","placeShip","row","col","isLegal","orientation","length","random","Math","floor","randomOrientation","newDirection","changeOrientation","computerPlacement","s","shift","receiveAttack","gameOver","every","isSunk","Ship","name","hits","hit","index","userBoardDiv","document","getElementById","compBoardDiv","userBoard","computerBoard","builder","appendCells","value","renderBoard","parent","grid","resetBoard","matrix","j","console","log","insertAdjacentHTML","renderFleet","shipContainer","classList","add","setAttribute","dataset","innerHTML","textContent","window","addEventListener"],"sourceRoot":""}