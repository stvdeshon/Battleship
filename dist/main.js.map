{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/ships.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/dragDrop.js","webpack://battleship/./src/index.js","webpack://battleship/./src/board-builder.js"],"sourcesContent":["export default class Ship {\n  constructor(name, length) {\n    this.name = name;\n    this.length = length;\n    this.orientation = \"horizontal\";\n    this.hits = [];\n  }\n\n  hit(index) {\n    if (this.hits.includes(index) || index < 0 || index >= this.length) {\n      return;\n    } else {\n      this.hits.push(index);\n    }\n  }\n\n  isSunk() {\n    return this.hits.length === this.length;\n  }\n\n  changeOrientation() {\n    return this.orientation === \"horizontal\"\n      ? (this.orientation = \"vertical\")\n      : (this.orientation = \"horizontal\");\n  }\n}\n","export default class GameBoard {\n  constructor(owner) {\n    this.owner = owner;\n    this.board = [];\n    this.fleet = []; //this is used to hold the board's ship objects to track the win/lose condition\n    this.bucket = []; //this holds the pieces to be placed, removed as they are placed\n    this.loser = false;\n  }\n\n  generateBoard() {\n    for (let i = 0; i < 10; i++) {\n      this.board[i] = new Array(10).fill(null);\n    }\n    return this.board;\n  }\n\n  fillBucket(ship) {\n    if (this.bucket.includes(ship)) {\n      return;\n    } else {\n      this.bucket.push(ship);\n    }\n  }\n\n  assembleFleet(ship) {\n    if (this.fleet.includes(ship)) {\n      return;\n    } else {\n      this.fleet.push(ship);\n    }\n  }\n\n  placeShip(ship, row, col) {\n    let index = this.bucket.indexOf(ship);\n    if (!this.isLegal(ship, row, col)) return;\n    if (ship.orientation === \"horizontal\") {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row][col + i] = ship;\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        this.board[row + i][col] = ship;\n      }\n    }\n    this.bucket.splice(index, 1);\n  }\n\n  random() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  randomOrientation(ship) {\n    const newDirection = Math.random() < 0.5;\n\n    for (let i = 0; i < this.fleet.length; i++) {\n      if (newDirection) ship.changeOrientation();\n    }\n  }\n\n  computerPlacement() {\n    const row = this.random(),\n      col = this.random();\n\n    for (let s = 0; s < this.bucket.length; s++) {\n      this.randomOrientation(this.bucket[s]);\n      if (this.bucket.length === 0) return;\n      if (!this.isLegal(this.bucket[s], row, col)) {\n        this.computerPlacement();\n      } else if (\n        this.bucket[s].orientation === \"horizontal\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row][col + i] = this.bucket[s];\n        }\n      } else if (\n        this.bucket[s].orientation === \"vertical\" &&\n        this.isLegal(this.bucket[s], row, col)\n      ) {\n        for (let i = 0; i < this.bucket[s].length; i++) {\n          this.board[row + i][col] = this.bucket[s];\n        }\n      }\n      this.bucket.shift();\n      this.computerPlacement();\n    }\n  }\n\n  isLegal(ship, row, col) {\n    if (row < 0 || row > 9 || col < 0 || col > 9) return false;\n    if (ship.orientation === \"horizontal\") {\n      if (col + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row][col + i]) return false;\n      }\n    } else if (ship.orientation === \"vertical\") {\n      if (row + ship.length > 9) return false;\n      for (let i = 0; i < ship.length; i++) {\n        if (this.board[row + i][col]) return false;\n      }\n    }\n\n    return true;\n  }\n\n  receiveAttack(row, col) {\n    if (this.board[row][col] === \"hit\" || this.board[row][col] === \"miss\") {\n      return;\n    } else if (this.board[row][col] === null) {\n      this.board[row][col] = \"miss\";\n    } else {\n      this.board[row][col] = \"hit\";\n    }\n  }\n\n  gameOver() {\n    this.loser = this.fleet.every((ship) => ship.isSunk());\n  }\n}\n","const DragDrop = (userBoardClass, userBoardDiv) => {\n  let draggedShip;\n\n  function dragStart(e) {\n    draggedShip = e.target;\n    console.log(\"start\");\n  }\n\n  function dragOver(e) {\n    e.preventDefault();\n    console.log(\"over\");\n  }\n\n  function dragEnter(e) {\n    e.preventDefault();\n    console.log(\"enter\");\n  }\n\n  function dragLeave() {\n    console.log(\"leave\");\n  }\n\n  function dragEnd() {\n    console.log(\"end\");\n  }\n\n  function index() {\n    for (let i = 0; i < userBoardClass.bucket.length; i++) {\n      if (userBoardClass.bucket[i].name === draggedShip.dataset.type) {\n        return userBoardClass.bucket[i];\n      }\n    }\n  }\n\n  function dragDrop(e) {\n    const cell = e.target;\n\n    const ship = index();\n\n    const row = Number(cell.dataset.row);\n    const col = Number(cell.dataset.col);\n    userBoardClass.placeShip(ship, row, col);\n    draggedShip.parentElement.removeChild(draggedShip); //this part works but the ships don't append yet\n    console.log(\"drop\");\n  }\n\n  function combineEvents() {\n    const docked = document.querySelectorAll(\".docked\");\n    const grid = userBoardDiv.childNodes;\n\n    for (const ship of docked) {\n      ship.addEventListener(\"dragstart\", dragStart);\n      ship.addEventListener(\"dragend\", dragEnd);\n    }\n    for (const cells of grid) {\n      cells.addEventListener(\"dragover\", dragOver);\n      cells.addEventListener(\"dragenter\", dragEnter);\n      cells.addEventListener(\"dragleave\", dragLeave);\n      cells.addEventListener(\"drop\", dragDrop);\n    }\n  }\n\n  return { combineEvents };\n};\n\nexport default DragDrop;\n","import BoardBuilder from \"./board-builder\";\nimport GameBoard from \"./gameboard\";\nimport DragDrop from \"./dragDrop\";\n// import Ship from \"./ships\";\n// import Player from \"./players\";\n\n//all of this is for testing and will be moved to proper locations later\n\nconst userBoardDiv = document.getElementById(\"player-container\");\nconst compBoardDiv = document.getElementById(\"computer-container\");\nconst userBoard = new GameBoard(\"human\");\nconst computerBoard = new GameBoard(\"computer\");\nconst builder = new BoardBuilder();\n\n//returns a new fleet so each board gets its own unique array of ships\n\nconst shipSelect = document.getElementById(\"ship-select\");\nconst drag = DragDrop(userBoard, userBoardDiv);\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"new\");\n  const compFleet = builder.newFleet();\n  const userFleet = builder.newFleet();\n  userBoard.generateBoard();\n  computerBoard.generateBoard();\n  //what follows is a nascent gameStart function\n  for (let i = 0; i < compFleet.length; i++) {\n    userBoard.fillBucket(compFleet[i]); //fills user's bucket for display to dom, to be dragged into the fleet and grid next\n    computerBoard.assembleFleet(compFleet[i]); //assemble fleet and fill bucket are separated so the logic\n  }\n\n  //the following two loops create a fleet for the user and their bucket and the DOM\n  for (let i = 0; i < userFleet.length; i++) {\n    computerBoard.fillBucket(userFleet[i]); //is more flexible for computer and human players\n  }\n  for (let i = 0; i < userBoard.bucket.length; i++) {\n    builder.renderPieces(shipSelect, userBoard.bucket[i].name);\n  }\n  computerBoard.computerPlacement();\n  builder.renderBoard(userBoardDiv, userBoard);\n  builder.renderBoard(compBoardDiv, computerBoard);\n  drag.combineEvents();\n});\n\n//below is the ship flipping and placing logic for human players\n//next I must change the individual ship objects orientation attribute\n\nconst flipBtn = document.getElementById(\"flip\");\n\nfunction flip() {\n  const bucket = Array.from(shipSelect.children);\n  for (let i = 0; i < bucket.length; i++) {\n    userBoard.bucket[i].changeOrientation(); //will need to empty bucket to prevent this from affecting ships in the gameboard\n    console.log(userBoard.bucket[i].orientation);\n    if (bucket[i].classList.contains(\"docked\")) {\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-horizontal`);\n      bucket[i].classList.toggle(`${userBoard.bucket[i].name}-vertical`);\n    }\n  }\n  // console.log(bucket);\n  console.log(computerBoard.board);\n}\n\nflipBtn.addEventListener(\"click\", flip);\n\n/*\nlet draggedShip;\nfunction dragStart(e) {\n  console.log(e.target);\n}\nfunction dragOver(e) {\n  e.preventDefault();\n}\nfunction dropShip(e) {\n  const startId = e.target.id;\n  // const ship = \n} \nbucket.forEach((ship) => ship.addEventListener(\"dragstart\", dragStart));\n*/\n","import Ship from \"./ships\";\n\nexport default class BoardBuilder {\n  appendCells(row, col, value) {\n    //value is null, ship.name, hit or miss\n    return `<div class=\"cell ${value}\" data-row=\"${row}\" data-col=\"${col}\" ></div>`;\n  }\n\n  appendPieces(shipName) {\n    return `<div id=\"${shipName}\" class=\"${shipName}-horizontal docked\" data-type=\"${shipName}\" draggable=\"true\"></div>`;\n  }\n\n  renderPieces(parent, ship) {\n    let pieces = this.appendPieces(ship);\n    parent.innerHTML += pieces;\n  }\n\n  renderBoard(parent, grid) {\n    this.resetBoard(parent);\n    let matrix = \"\";\n    for (let i = 0; i < grid.board.length; i++) {\n      for (let j = 0; j < grid.board.length; j++) {\n        let value = grid.board[i][j];\n        if (value === null) {\n          value = \"\";\n        } else if (value !== null && typeof value === \"object\") {\n          if (grid.owner === \"computer\") {\n            //this condition is temporary and will need to be rethought later\n            value = value.name;\n          } else {\n            value = \"\";\n          }\n        }\n        matrix += this.appendCells(i, j, value);\n      }\n    }\n    parent.insertAdjacentHTML(\"afterbegin\", matrix);\n  }\n\n  resetBoard(parent) {\n    parent.textContent = \"\";\n  }\n\n  newFleet() {\n    const carrier = new Ship(\"carrier\", 5);\n    const battleship = new Ship(\"battleship\", 4);\n    const destroyer = new Ship(\"destroyer\", 3);\n    const cruiser = new Ship(\"cruiser\", 3);\n    const submarine = new Ship(\"submarine\", 2);\n    return [carrier, battleship, destroyer, cruiser, submarine];\n  }\n}\n"],"names":["Ship","constructor","name","length","this","orientation","hits","hit","index","includes","push","isSunk","changeOrientation","GameBoard","owner","board","fleet","bucket","loser","generateBoard","i","Array","fill","fillBucket","ship","assembleFleet","placeShip","row","col","indexOf","isLegal","splice","random","Math","floor","randomOrientation","newDirection","computerPlacement","s","shift","receiveAttack","gameOver","every","userBoardDiv","document","getElementById","compBoardDiv","userBoard","computerBoard","builder","appendCells","value","appendPieces","shipName","renderPieces","parent","pieces","innerHTML","renderBoard","grid","resetBoard","matrix","j","insertAdjacentHTML","textContent","newFleet","shipSelect","drag","userBoardClass","draggedShip","dragStart","e","target","console","log","dragOver","preventDefault","dragEnter","dragLeave","dragEnd","dragDrop","cell","dataset","type","Number","parentElement","removeChild","combineEvents","docked","querySelectorAll","childNodes","addEventListener","cells","window","compFleet","userFleet","from","children","classList","contains","toggle"],"sourceRoot":""}